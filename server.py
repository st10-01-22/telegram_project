import telebot
from map import get_map_cell
from wikipediaapi import Wikipedia
from config import BOT_TOKEN, API_KEY
import requests

# –°–æ–∑–¥–∞—ë–º –±–æ—Ç–∞
bot = telebot.TeleBot(BOT_TOKEN)
# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —è–∑—ã–∫–∞ –≤–∏–∫–∏–ø–µ–¥–∏–∏
wiki = Wikipedia('ru')
# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ –ª–∞–±–∏—Ä–∏–Ω—Ç–∞
cols, rows = 8, 8

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ª–∞–±–∏—Ä–∏–Ω—Ç–∞
keyboard = telebot.types.InlineKeyboardMarkup()
keyboard.row(telebot.types.InlineKeyboardButton('‚Üê', callback_data='left'),
             telebot.types.InlineKeyboardButton('‚Üë', callback_data='up'),
             telebot.types.InlineKeyboardButton('‚Üì', callback_data='down'),
             telebot.types.InlineKeyboardButton('‚Üí', callback_data='right'))

# –ú–µ—Å—Ç–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ª–∞–±–∏—Ä–∏–Ω—Ç–æ–≤
maps = {}

# –§—É–Ω–∫—Ü–∏—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∏ –∫–∞—Ä—Ç—ã –ª–∞–±–∏—Ä–∏–Ω—Ç–∞
def get_map_str(map_cell, player):
    map_str = ""
    for y in range(rows * 2 - 1):
        for x in range(cols * 2 - 1):
            if map_cell[x + y * (cols * 2 - 1)]:
                map_str += "‚¨õ"
            elif (x, y) == player:
                map_str += "üî¥"
            else:
                map_str += "‚¨ú"
        map_str += "\n"

    return map_str


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–¥—Ä–µ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@bot.message_handler(content_types=["location"])
def location(message):
    if message.location is not None:
        coord = str(message.location.longitude) + ',' + str(message.location.latitude)
        r = requests.get('https://geocode-maps.yandex.ru/1.x/?apikey=' + API_KEY + '&format=json&geocode=' + coord)

        if len(r.json()['response']['GeoObjectCollection']['featureMember']) > 0:
            address = r.json()['response']['GeoObjectCollection']['featureMember'][0]['GeoObject']['metaDataProperty'][
                'GeocoderMetaData']['text']
            bot.send_message(message.chat.id, '–í–∞—à –∞–¥—Ä–µ—Å:\n{}'.format(address))
        else:
            bot.send_message(message.chat.id, '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –í–∞—à –∞–¥—Ä–µ—Å')


# –§—É–Ω–∫—Ü–∏—è –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã
@bot.message_handler(commands=['play'])
def play_message(message):
    map_cell = get_map_cell(cols, rows)

    user_data = {
        'map': map_cell,
        'x': 0,
        'y': 0
    }

    maps[message.chat.id] = user_data

    bot.send_message(message.from_user.id, get_map_str(map_cell, (0, 0)), reply_markup=keyboard)


# –§—É–Ω–∫—Ü–∏—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–≥—Ä–æ–π
@bot.callback_query_handler(func=lambda call: True)
def callback_func(query):
    user_data = maps[query.message.chat.id]
    new_x, new_y = user_data['x'], user_data['y']

    if query.data == 'left':
        new_x -= 1
    if query.data == 'right':
        new_x += 1
    if query.data == 'up':
        new_y -= 1
    if query.data == 'down':
        new_y += 1

    if new_x < 0 or new_x > 2 * cols - 2 or new_y < 0 or new_y > rows * 2 - 2:
        return None
    if user_data['map'][new_x + new_y * (cols * 2 - 1)]:
        return None

    user_data['x'], user_data['y'] = new_x, new_y

    if new_x == cols * 2 - 2 and new_y == rows * 2 - 2:
        bot.edit_message_text(chat_id=query.message.chat.id,
                              message_id=query.message.id,
                              text="–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏")
        return None

    bot.edit_message_text(chat_id=query.message.chat.id,
                          message_id=query.message.id,
                          text=get_map_str(user_data['map'], (new_x, new_y)),
                          reply_markup=keyboard)


# –§—É–∫–Ω—Ü–∏—è –ø–µ—Ä–µ—Å—ã–ª–∞ –æ—Ç–≤–µ—Ç–∞ –≤–∏–∫–∏–ø–µ–¥–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
def send_long_message(chat_id, text):
    while len(text) > 4096:
        bot.send_message(chat_id, text[0:4096])
        text = text[4096::]

    bot.send_message(chat_id, text)


# –°—Ç–∞—Ä—Ç–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è
@bot.message_handler(commands=['help', 'start'])
def handle_command(message):
    bot.send_message(message.chat.id, f"–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, {message.from_user.username}")
    bot.send_message(message.chat.id, "–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —è —É–º–µ—é —Ç—Ä–∏ –≤–µ—â–∏:")
    bot.send_message(message.chat.id, "1) –¢—ã –º–æ–∂–µ—à—å –ø—Ä–∏—Å–ª–∞—Ç—å –º–Ω–µ –ª—é–±–æ–µ —Å–ª–æ–≤–æ –∏ –¥–∞–º —Ç–µ–±–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω—ë–º –∏–∑ –≤–∏–∫–∏–ø–µ–¥–∏–∏")
    bot.send_message(message.chat.id, "2) –ï—Å–ª–∏ —Ç—ã —Å–∫–∏–Ω–µ—à—å –º–Ω–µ —Å–≤–æ—é –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é, —è —Å–º–æ–≥—É —Å–∫–∞–∑–∞—Ç—å —Ç–µ–±–µ —Ç–≤–æ–π —Ç–æ—á–Ω—ã–π –∞–¥—Ä–µ—Å")
    bot.send_message(message.chat.id, "3) –ù–∞–ø–∏—à–∏ /play —á—Ç–æ–±—ã —Å—ã–≥—Ä–∞—Ç—å –≤ –º–∏–Ω–∏–∏–≥—Ä—É")


# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏, –µ—Å—Ç—å –ª–∏ –≤–æ–æ–±—â–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–∞ –≤–∏–∫–∏–ø–µ–¥–∏–∏
@bot.message_handler(content_types=["text"])
def handle_message(message):
    page = wiki.page(message.text)
    if page.exists():
        send_long_message(message.chat.id, page.summary)
    else:
        bot.send_message(message.chat.id, 'Nothing found')


if __name__ == '__main__':
    bot.polling(True)
